@page "/llamachat"
@using System.Data
@rendermode InteractiveServer
@using System.Text.Json;
@using System.Text;
@using System.Text.RegularExpressions;
@attribute [StreamRendering]

<PageTitle>LlamaChat</PageTitle>

<h3>Chat with Llama</h3>


<div class="chat-messages">
    @*Iterates through all messages in mychat.Messages.
    In the chatwindow inputmessage is displayed with date, name and message.*@
    @foreach (var inputmessage in mychat.Messages)
    {
        <div class="chat-message">
            <span class="message-date">@inputmessage.Date:</span>
            <span class="message-sender">@inputmessage.Sender.Name</span>
            @inputmessage.TextMessage
        </div>
    }
</div>


<div>
    <input type="text" placeholder="Enter your Username" @bind="newUserName" />
    <button @onclick="SetUserName">Set Username</button>
</div>

@if (isUserNameSet)
{
    <div>
        @*Input field with instructions. @bind binds the input field to newInputMessage.*@
        <input type="text" placeholder="Enter your message" @bind="newInputMessage" />
        <button @onclick="AddInputMessage">Send message</button>
    </div>
}
else
{
    <p>Please enter a username to start chatting.</p>
}

@code {
    DataBase db = new DataBase();
    public string? newUserName;
    public string? newInputMessage;
    public bool isUserNameSet = false;
    public User? currentUser;

    // Llama is a fixed non-editable user for responses
    public User Llama = new User("Llama", 4);

    public List<User> userList = new List<User>();
    public string selectedUser;
    public Chat mychat;
    public int mychatId = 1;

    protected override void OnInitialized()
    {
        mychat = new Chat();
        LoadData(mychatId);
    }

    public void InitializeUser(string username)
    {
        DataBase dataBase = new DataBase();
        long userId = db.GetUserId(username);
        Llama = new User(username, userId);
    }


    // Data is collected from the database and displayed in the chatwindow. Populates mychat.Messages with previous messages.
    public void LoadData(long chatId)
    {
        DataBase db = new DataBase();
        System.Data.DataTable dt = db.Fetchmessages(chatId);

        foreach (DataRow row in dt.Rows)
        {
            string TextMessage = row["message"].ToString();
            long ChatID = Convert.ToInt64(row["chat_id"]);
            DateTime Date = (DateTime)row["message_sent"];
            string ChatName = row["chatname"].ToString();
            string username = row["username"].ToString();
            long userid = Convert.ToInt64(row["user_id"]);
            if (string.IsNullOrWhiteSpace("username"))
            {
                Console.WriteLine("username is null or whitespace");
            }

            User user = new User(row["username"].ToString(), Convert.ToInt64(row["user_id"]));
            User Sender = user;

            Message messageFromRow = new Message(Sender, TextMessage, ChatName, ChatID, Date);

            mychat.Messages.Add(messageFromRow);
            mychat.Users.Add(user);
        }
    }


    private void SetUserName()
    {
        if (!string.IsNullOrWhiteSpace(newUserName) && newUserName != "Llama")
        {
            DataBase db = new DataBase();

            long userId = db.GetUserId(newUserName);
            currentUser = new User(newUserName, userId);
            isUserNameSet = true;
            newUserName = string.Empty;
        }
        else
        {
            Console.WriteLine("You can not use 'Llama' as your username!");   
        }
    }


    public void AddInputMessage()
    {
        if (currentUser != null && !string.IsNullOrWhiteSpace(newInputMessage))
        {
            DataBase db = new DataBase();

            long mychatId = db.GetChatId("mychat");
            long userId = db.GetUserId(currentUser.Name);
            if (userId == -1)
            {
                userId = db.CreateUser(currentUser.Name);
            }

            mychat.CreateMessage(currentUser, newInputMessage, "mychat", mychatId, DateTime.Now);
            string generatedSqlString = db.GenerateSqlString("mychat", currentUser.Name, "messageText");
            db.InsertChatMessage(generatedSqlString, userId, newInputMessage, mychatId);

            AddPrompt();
            newInputMessage = string.Empty;
        }
    }


    public async Task AddPrompt()
    {
        if (!string.IsNullOrWhiteSpace(newInputMessage))
        {
            await PostRequest();

            DataBase db = new DataBase();

            long mychatId = db.GetChatId("mychat");

            mychat.CreateMessage(Llama, result, "mychat", mychatId, DateTime.Now);

            StateHasChanged();

            string generatedLlamaSqlString = db.GenerateSqlString("mychat", Llama.Name, result);
            db.InsertChatMessage(generatedLlamaSqlString, 4, result, mychatId);
        }
    }


    private string? result;
    private static HttpClient httpClient = new()
        {
            BaseAddress = new Uri("http://localhost:11434/"),
            Timeout = TimeSpan.FromMinutes(5)
        };

    // Performs POST requests to the Llama API.
    public async Task PostRequest()
    {
        await PostAsync(httpClient);
    }

    // prompt is sent to Llama and a response is generated using this method.
    private async Task PostAsync(HttpClient httpClient)
    {
        using StringContent jsonContent = new(
            JsonSerializer.Serialize(new
            {
                model = "llama2:latest",
                prompt = $"{newInputMessage}"
            }),
            Encoding.UTF8,
            "application/json");

        StringBuilder fullResponse = new();


        try
        {
            using HttpResponseMessage response = await httpClient.PostAsync("api/generate", jsonContent);
            response.EnsureSuccessStatusCode();

            using var stream = await response.Content.ReadAsStreamAsync();
            using var reader = new StreamReader(stream);

            string? line;

            bool isResponseComplete = false;

            while ((line = await reader.ReadLineAsync()) != null)
            {
                Console.WriteLine($"API response Line: {line}");
                var jsonDoc = JsonDocument.Parse(line);
                var responseText = jsonDoc.RootElement.GetProperty("response").GetString();
                bool isDone = jsonDoc.RootElement.GetProperty("done").GetBoolean();

                if (!string.IsNullOrWhiteSpace(responseText))
                {
                    fullResponse.Append(responseText);
                }

                if (isDone)
                {
                    isResponseComplete = true;
                    break;
                }
            }

            if (isResponseComplete)
            {
                result = fullResponse.ToString();
                Console.WriteLine($"Full Response after processing: {result}");
                StateHasChanged();
            }
            result = fullResponse.ToString();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            result = $"Error: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}