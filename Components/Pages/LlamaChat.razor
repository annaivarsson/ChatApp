@page "/llamachat"
@using System.Data
@rendermode InteractiveServer
@using System.Text.Json;
@using System.Text;
@using System.Text.RegularExpressions;
@attribute [StreamRendering]

<PageTitle>LlamaChat</PageTitle>

<h3>Chat with Llama</h3>


<div class="chat-messages">
    @*Iterates through all messages in mychat.Messages.
    In the chatwindow inputmessage is displayed with date, name and message.*@
    @foreach (var inputmessage in mychat.Messages)
    {
        <div class="chat-message">
            <span class="message-date">@inputmessage.Date:</span>
            <span class="message-sender">@inputmessage.Sender.Name</span>
            @inputmessage.TextMessage
        </div>
    }
</div>


<div>
    <input type="text" placeholder="Enter your Username" @bind="newUserName" />
    <button @onclick="SetUserName">Set Username</button>
</div>

@if (isUserNameSet)
{
    <div>
        @*Input field with instructions. @bind binds the input field to newInputMessage.*@
        <input type="text" placeholder="Enter your message" @bind="newInputMessage" />
        <button @onclick="AddInputMessage">Send message</button>
    </div>
}
else
{
    <p>Please enter a username to start chatting.</p>
}

@code {
    User user4 = new User("Llama");
    public List<User> userList = new List<User>();
    public string selectedUser;
    public Chat mychat;
    public int mychatId = 1;
    public string? newUserName;
    public string? newInputMessage;
    public bool isUserNameSet = false;
    public User? currentUser;


    protected override void OnInitialized()
    {
        mychat = new Chat();
        LoadData(mychatId);
    }

    private void SetUserName()
    {
        if (!string.IsNullOrWhiteSpace(newUserName))
        {
            currentUser = new User(newUserName);
            isUserNameSet = true;
            newUserName = string.Empty;
        }
    }

    // Data is collected from the database and displayed in the chatwindow. Populates mychat.Messages with previous messages.
    public void LoadData(long chatId)
    {
        System.Data.DataTable dt = DataBase.Fetchmessages(chatId);

        foreach (DataRow row in dt.Rows)
        {
            User user = new User(row["username"].ToString());

            string TextMessage = row["message"].ToString();
            User Sender = user;
            long ChatID = Convert.ToInt64(row["chat_id"]);
            DateTime Date = (DateTime)row["message_sent"];
            string ChatName = row["chatname"].ToString();
            Message messageFromRow = new Message(Sender, TextMessage, ChatName, ChatID, Date);
            mychat.Messages.Add(messageFromRow);
            mychat.Users.Add(user);
        }
    }


    public void AddInputMessage()
    {
        if (currentUser != null && !string.IsNullOrWhiteSpace(newInputMessage))
        {
            long userId = DataBase.CheckUserTable(currentUser.Name);
            if (userId == 1)
            {
                userId = DataBase.CreateUser(currentUser.Name);
            }

            long mychatId = DataBase.CheckChatTable("mychat");
            mychat.CreateMessage(currentUser, newInputMessage, "mychat", mychatId, DateTime.Now);
            string generatedSqlString = DataBase.GenerateSqlString("mychat", currentUser.Name, "messageText");
            DataBase.RunTransaction(generatedSqlString, userId, newInputMessage, mychatId);

            AddPrompt();
            newInputMessage = string.Empty;
        }
    }

    public async Task AddPrompt()
    {
        if (!string.IsNullOrWhiteSpace(newInputMessage))
        {
            await PostStuff();

            long mychatId = DataBase.CheckChatTable("mychat");
            long userId = DataBase.CheckUserTable(user4.Name);
            

            mychat.CreateMessage(user4, result, "mychat", mychatId, DateTime.Now);

            StateHasChanged();

            string generatedLlamaSqlString = DataBase.GenerateSqlString("mychat", user4.Name, result);
            DataBase.RunTransaction(generatedLlamaSqlString, 4, result, mychatId);
        }
    }


    private string? result;
    private static HttpClient httpClient = new()
        {
            BaseAddress = new Uri("http://localhost:11434/"),
            Timeout = TimeSpan.FromMinutes(5)
        };

    // Performs GET requests to the Llama API.
    public async Task DoStuff()
    {
        await GetAsync(httpClient);
    }

    // Performs POST requests to the Llama API.
    public async Task PostStuff()
    {
        await PostAsync(httpClient);
    }

    // Information about the Llama model is generated by this method 
    static async Task GetAsync(HttpClient httpClient)
    {
        try
        {
            using HttpResponseMessage response = await httpClient.GetAsync("api/tags");
            response.EnsureSuccessStatusCode();

            string result = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"{result}\n");
        }
        catch (Exception ex)
        {
            string result = $"Error: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // prompts is sent to LLama and a response is generated using this method.
    private async Task PostAsync(HttpClient httpClient)
    {
        using StringContent jsonContent = new(
            JsonSerializer.Serialize(new
            {
                model = "llama2:latest",
                prompt = $"{newInputMessage}"
            }),
            Encoding.UTF8,
            "application/json");

        try
        {
            using HttpResponseMessage response = await httpClient.PostAsync("api/generate", jsonContent);
            response.EnsureSuccessStatusCode();

            using var stream = await response.Content.ReadAsStreamAsync();
            using var reader = new StreamReader(stream);


            StringBuilder fullResponse = new();
            string? line;

            while ((line = await reader.ReadLineAsync()) != null)
            {
                Console.WriteLine($"API response Line: {line}");
                var jsonDoc = JsonDocument.Parse(line);
                var responseText = jsonDoc.RootElement.GetProperty("response").GetString();

                if (!string.IsNullOrWhiteSpace(responseText))
                {
                    fullResponse.AppendLine(responseText.Trim());
                }
            }
            result = Regex.Replace(fullResponse.ToString(), @"\s+", " ").Trim();
            Console.WriteLine($"Full Response after processing: {result}");
            StateHasChanged();

        }
        catch (Exception ex)
        {
            result = $"Error: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
